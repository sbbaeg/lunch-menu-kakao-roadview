// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 1. 사용자 계정 모델 (NextAuth.js와 연동)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 관계 설정
  accounts   Account[]
  sessions   Session[]
  favorites  Favorite[]
  blacklist  Blacklist[]
}

// 2. 음식점 정보 모델
model Restaurant {
  id           Int      @id @default(autoincrement())
  kakaoPlaceId String   @unique // 카카오맵 ID로 중복 체크
  placeName    String
  address      String?
  latitude     Float?
  longitude    Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt // Lazy Update를 위한 타임스탬프

  // 관계 설정
  favorites  Favorite[]
  blacklist  Blacklist[]
}

// 3. 즐겨찾기 연결 모델 (User와 Restaurant 연결)
model Favorite {
  userId       String
  restaurantId Int
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([userId, restaurantId]) // 복합 기본 키
}

// 4. 블랙리스트 연결 모델 (User와 Restaurant 연결)
model Blacklist {
  userId       String
  restaurantId Int
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([userId, restaurantId]) // 복합 기본 키
}


// --- 아래는 NextAuth.js Adapter가 사용하는 모델들입니다 ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}