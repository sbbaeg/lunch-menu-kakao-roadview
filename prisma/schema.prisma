// Re-trigger detection
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

// 1. 사용자 계정 모델 (NextAuth.js와 연동)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // 관계 설정
  accounts         Account[]
  sessions         Session[]
  favorites        Favorite[]
  blacklist        Blacklist[]
  tags             Tag[]
  tagSubscriptions TagSubscription[]
  reviews          Review[]
  reviewVotes      ReviewVote[]
  restaurantVotes  RestaurantVote[]
}

// 2. 음식점 정보 모델
model Restaurant {
  id           Int      @id @default(autoincrement())
  kakaoPlaceId String   @unique // 카카오맵 ID로 중복 체크
  placeName    String
  address      String?
  latitude     Float?
  longitude    Float?
  categoryName String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt // Lazy Update를 위한 타임스탬프

  // 관계 설정
  favorites  Favorite[]
  blacklist  Blacklist[]
  taggedBy   TagsOnRestaurants[]
  reviews    Review[]

  likeCount    Int @default(0)
  dislikeCount Int @default(0)

  votes        RestaurantVote[]
}

// 3. 즐겨찾기 연결 모델 (User와 Restaurant 연결)
model Favorite {
  userId       String
  restaurantId Int
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([userId, restaurantId]) // 복합 기본 키
}

// 4. 블랙리스트 연결 모델 (User와 Restaurant 연결)
model Blacklist {
  userId       String
  restaurantId Int
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([userId, restaurantId]) // 복합 기본 키
}

// 7. 리뷰 모델
model Review {
  id           Int      @id @default(autoincrement())
  rating       Int // 1-5점
  text         String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  needsModeration Boolean @default(false)

  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  votes        ReviewVote[]

  // 한 명의 유저는 한 식당에 하나의 리뷰만 작성 가능
  @@unique([userId, restaurantId])
  @@index([needsModeration])
}

// 8. 리뷰 투표 모델
model ReviewVote {
  userId   String
  reviewId Int
  type     VoteType

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@id([userId, reviewId])
}


// --- 아래는 NextAuth.js Adapter가 사용하는 모델들입니다 ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// 5. 사용자가 생성한 태그 모델
model Tag {
  id     Int    @id @default(autoincrement())
  name   String // 태그 이름 (예: #혼밥하기좋은)
  userId String // 생성한 사용자 ID
  isPublic Boolean @default(false)
  needsModeration Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // 관계 설정: 이 태그가 어떤 음식점들에 붙었는지
  restaurants TagsOnRestaurants[]
  subscribers TagSubscription[]

  // 한 명의 유저는 동일한 이름의 태그를 중복 생성할 수 없음
  @@unique([name, userId])
  @@index([needsModeration])
}

model TagSubscription {
  userId String
  tagId  Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([userId, tagId]) // 복합 기본 키
}

// 6. 음식점과 태그의 다대다 관계를 위한 연결 모델
model TagsOnRestaurants {
  restaurantId Int
  tagId        Int
  assignedAt   DateTime @default(now())

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([restaurantId, tagId]) // 복합 기본 키
}

// 9. 비속어 단어 모델
model ProfanityWord {
  id        Int      @id @default(autoincrement())
  word      String   @unique
  createdAt DateTime @default(now())
}

model RestaurantVote {
  userId       String
  restaurantId Int
  type         VoteType // 'UPVOTE' or 'DOWNVOTE'

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@id([userId, restaurantId]) // 한 사용자는 식당 1곳에 1종류의 투표만 가능
}